Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; 
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #Git
    PROPERTIES
      Name                #Git
      Origin              #{DC2A41E3-EB15-4FDF-8C2B-5EC1B19E8FCF}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class Git
        #{
        #    #localmacro.git
        #        'git.exe'
        #    #endmacro
        #
        #    #localmacro.TortoiseGit
        #        'TortoiseGitProc.exe'
        #    #endmacro
        #}
      ENDSOURCE
      SOURCE #checkout
        #public static str checkout(str _repository, str _branch)
        #{
        #    container branches = Git::getBranches(_repository);
        #
        #    if (conFind(branches, _branch))
        #    {
        #        return Git::executeCommand(_repository, 'checkout ' + _branch);
        #    }
        #    else if (conFind(branches, 'remotes/origin/' + _branch))
        #    {
        #        return Git::executeCommand(_repository, strFmt('checkout -b %1 remotes/origin/%1 --',  _branch)); // checkout from remote
        #    }
        #    else
        #    {
        #        return Git::executeCommand(_repository, 'checkout -b ' + _branch); // create new
        #    }
        #}
      ENDSOURCE
      SOURCE #commit
        #public static str commit(str _repository, str _message)
        #{
        #    Git::executeCommand(_repository, 'add .');
        #
        #    return Git::executeCommand(_repository, strFmt('commit -a -m "%1"', _message));
        #}
      ENDSOURCE
      SOURCE #commitInteractive
        #public static int commitInteractive(str _repository, str _message)
        #{
        #    #WinAPI
        #
        #    return WinAPI::shellExecute(
        #        #TortoiseGit,
        #        strFmt('/command:commit /path:"%1" /logmsg:"%2"', _repository, _message),
        #        _repository,
        #        #ShellExeOpen,
        #        #SW_SHOWNORMAL,
        #        true
        #    );
        #}
      ENDSOURCE
      SOURCE #executeCommand
        #public static str executeCommand(
        #    str     _repository,
        #    str     _command)
        #{
        #    System.Diagnostics.Process              process;
        #    System.Diagnostics.ProcessStartInfo     processStartInfo;
        #    System.Exception                        ex;
        #    System.IO.StreamReader                  streamRead;
        #    int                                     exitCode;
        #    str                                     ret;
        #
        #
        #    if (WinAPI::fileExists(_repository + @'\.git\index.lock', false))
        #    {
        #        throw error('index.lock exists - repository operation in progress');
        #    }
        #
        #    try
        #    {
        #        if (WinAPI::setCurrentDirectory(_repository) != 0)
        #        {
        #            error('Unable to change working directory to '+_repository);
        #            return '';
        #        }
        #
        #        new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #        process = new System.Diagnostics.Process();
        #
        #        processStartInfo = new System.Diagnostics.ProcessStartInfo();
        #        processStartInfo.set_FileName(#git);
        #        processStartInfo.set_Arguments(_command);
        #        processStartInfo.set_UseShellExecute(false);
        #        processStartInfo.set_RedirectStandardOutput(true);
        #        processStartInfo.set_RedirectStandardError(true);
        #        processStartInfo.set_CreateNoWindow(true);
        #
        #        process.set_StartInfo(processStartInfo);
        #        process.Start();
        #        //process.WaitForExit(1000*5);   //TODO: without timeout it hangs when StandardOutput message is larger than 4KB
        #                                        // http://stackoverflow.com/questions/139593/processstartinfo-hanging-on-waitforexit-why
        #
        #        while (!process.get_HasExited())
        #        {
        #            streamRead = process.get_StandardOutput();
        #            ret += streamRead.ReadToEnd();
        #        }
        #
        #        exitCode = CLRInterop::getAnyTypeForObject(process.get_ExitCode());
        #        if (exitCode)
        #        {
        #            streamRead = process.get_StandardError();
        #            /*throw*/ error(streamRead.ReadToEnd());
        #        }
        #        else
        #        {
        #            streamRead = process.get_StandardOutput();
        #            ret += streamRead.ReadToEnd();
        #        }
        #
        #        CodeAccessPermission::revertAssert();
        #
        #    }
        #    catch(Exception::CLRError)
        #    {
        #        // BP Deviation documented
        #        ex = ClrInterop::getLastException();
        #
        #        while (ex != null)
        #        {
        #            error(ex.ToString());
        #
        #            ex = ex.get_InnerException();
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getBranches
        #public static container getBranches(
        #    str         _repository,
        #    boolean     _withCurrentBranchMark = false)
        #{
        #    #define.separator('\n')
        #
        #    str         branchesStr;
        #    container   branchesCon;
        #    int         i = 1;
        #    int         j;
        #    int         length;
        #    int         separatorLength = strLen(#separator);
        #    str         line;
        #
        #    void add2con(str _line)
        #    {
        #        _line = strLRTrim(_line);
        #
        #        if (_line)
        #        {
        #            if (!_withCurrentBranchMark && subStr(_line, 1, 2) == '* ')
        #            {
        #                _line = subStr(_line, 3, strLen(_line));                  // remove current branch marker
        #            }
        #
        #            branchesCon += _line;
        #        }
        #    }
        #
        #    branchesStr = Git::executeCommand(_repository, 'branch -a');
        #
        #    length = strLen(branchesStr);
        #
        #    if (length)
        #    {
        #        j = strScan(branchesStr, #separator, 1, length);
        #
        #        while (j)
        #        {
        #            line = (subStr(branchesStr, i, j-i));
        #            add2con(line);
        #            i = j + separatorLength;
        #            j = strScan(branchesStr, #separator, i, length);
        #        }
        #        add2con(subStr(branchesStr, i, length-i+1));
        #    }
        #
        #    return branchesCon;
        #}
      ENDSOURCE
      SOURCE #getCurrentBranch
        #public static str getCurrentBranch(str _repository)
        #{
        #    container   branchesCon;
        #    str         branch;
        #    int         i;
        #
        #    branchesCon = Git::getBranches(_repository, true);
        #
        #    for (i = 1; i <= conLen(branchesCon); i++)
        #    {
        #        branch = conPeek(branchesCon, i);
        #
        #        if (subStr(branch, 1, 2) == '* ')
        #        {
        #            return subStr(branch, 3, strLen(branch));
        #        }
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getLog
        #public static container getLog(
        #    str         _repository,
        #    str         _file,
        #    int         _lines = 10)
        #{
        #    #define.LineSeparator('\n')
        #    #define.FieldSeparator('\t')
        #
        #    str         parmStr;
        #    str         logStr;
        #    container   linesCon;
        #    int         lineNum;
        #
        #    str         commitHash;
        #    str         subject;
        #    container   filesCon;
        #
        #    container   ret;
        #    int         i;
        #    str         line;
        #
        #    // Create command string:
        #    parmStr  = 'log';
        #    parmStr += strFmt(' -n %1', _lines);
        #    parmStr += ' --name-status';
        #    if (_file)
        #    {
        #        parmStr += ' --follow';
        #    }
        #    parmStr += ' --no-merges';
        #    parmStr += ' --date=iso';
        #    parmStr += strFmt(' --pretty=format:"\%h%1\%s"', #FieldSeparator);
        #    parmStr += ' ' + _file;
        #
        #    // Execute the command:
        #    logStr = Git::executeCommand(_repository, parmStr);
        #
        #    // Parse result:
        #    linesCon = str2con(logStr, #LineSeparator);
        #    for (i=1; i<=conLen(linesCon); i++)
        #    {
        #        lineNum++;
        #        line = conPeek(linesCon, i);
        #
        #        if (!line)
        #        {
        #            lineNum = 0;
        #            ret += [[commitHash, subject, filesCon]];
        #            filesCon = conNull();
        #            continue;
        #        }
        #
        #        if (lineNum == 1)
        #        {
        #            [commitHash, subject] = str2con(line, #FieldSeparator);
        #        }
        #        else if (lineNum > 1)
        #        {
        #            filesCon += [str2con(line, #FieldSeparator)];
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isClean
        #public static boolean isClean(str _repository)
        #{
        #    str     status;
        #
        #    status =  Git::executeCommand(_repository, 'status');
        #
        #    return strEndsWith(status, 'clean\n');
        #}
      ENDSOURCE
      SOURCE #merge
        #public static str merge(str _repository, str _branch)
        #{
        #    str     ret;
        #
        #    // Merge using 'theirs' strategy - changes from lower layer will prevail over current layer
        #    ret = Git::executeCommand(_repository, 'merge -Xtheirs ' + _branch);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #mergeInteractive
        #public static int mergeInteractive(str _repository)
        #{
        #    #WinAPI
        #
        #    return WinAPI::shellExecute(
        #        #TortoiseGit,
        #        strFmt('/command:merge /path:"%1"', _repository),
        #        _repository,
        #        #ShellExeOpen,
        #        #SW_SHOWNORMAL,
        #        true
        #    );
        #}
      ENDSOURCE
      SOURCE #resolveInteractive
        #public static int resolveInteractive(str _repository)
        #{
        #    #WinAPI
        #
        #    return WinAPI::shellExecute(
        #        #TortoiseGit,
        #        strFmt('/command:resolve /path:"%1"', _repository),
        #        _repository,
        #        #ShellExeOpen,
        #        #SW_SHOWNORMAL,
        #        true
        #    );
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
